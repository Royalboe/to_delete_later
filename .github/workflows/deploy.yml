name: Deployment
on:
   push:
    branches:
      - main
      - dev

env:
  CACHE_KEY: node-modules-deps
  MONGODB_DB_NAME: ${{ vars.MONGODB_DB_NAME }}

jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    container:
      image: node:16
    env:
      # MONGODB_CLUSTER_ADDRESS: ${{ vars.MONGODB_CLUSTER_ADDRESS }}
      MONGODB_CLUSTER_ADDRESS: mongodb
      MONGODB_CONNECTION_PROTOCOL: mongodb
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: ${{ vars.PORT }}
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
    steps:
      - name: Get Code
        uses: actions/checkout@v4
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      # This runs only when we don't have a cached npm folder
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: ${{ env.MONGODB_USERNAME }}"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        run: |        
          echo "MONGODB_DB_NAME: ${{ env.MONGODB_DB_NAME }}"
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
